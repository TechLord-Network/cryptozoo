/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CryptoZooMarketInterface extends ethers.utils.Interface {
  functions: {
    "acceptBidForAnimal(uint256,uint256)": FunctionFragment;
    "allAnimalsAssigned()": FunctionFragment;
    "allInitialOwnersAssigned()": FunctionFragment;
    "animalBids(uint256)": FunctionFragment;
    "animalIndexToAddress(uint256)": FunctionFragment;
    "animalNoLongerForSale(uint256)": FunctionFragment;
    "animalsOfferedForSale(uint256)": FunctionFragment;
    "animalsRemainingToAssign()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyAnimal(uint256)": FunctionFragment;
    "buyEgg()": FunctionFragment;
    "decimals()": FunctionFragment;
    "enterBidForAnimal(uint256)": FunctionFragment;
    "getAnimal(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextAnimalIndexToAssign()": FunctionFragment;
    "offerAnimalForSale(uint256,uint256)": FunctionFragment;
    "offerAnimalForSaleToAddress(uint256,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingWithdrawals(address)": FunctionFragment;
    "setInitialOwner(address,uint256)": FunctionFragment;
    "setInitialOwners(address[],uint256[])": FunctionFragment;
    "setZooToken(address)": FunctionFragment;
    "standard()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferAnimal(address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawBidForAnimal(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBidForAnimal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allAnimalsAssigned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allInitialOwnersAssigned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "animalBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "animalIndexToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "animalNoLongerForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "animalsOfferedForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "animalsRemainingToAssign",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyAnimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyEgg", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enterBidForAnimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextAnimalIndexToAssign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerAnimalForSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerAnimalForSaleToAddress",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialOwners",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setZooToken", values: [string]): string;
  encodeFunctionData(functionFragment: "standard", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnimal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBidForAnimal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBidForAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAnimalsAssigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allInitialOwnersAssigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "animalBids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "animalIndexToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "animalNoLongerForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "animalsOfferedForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "animalsRemainingToAssign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyAnimal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyEgg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterBidForAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnimal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextAnimalIndexToAssign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerAnimalForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerAnimalForSaleToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZooToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "standard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBidForAnimal",
    data: BytesLike
  ): Result;

  events: {
    "AnimalBidEntered(uint256,uint256,address)": EventFragment;
    "AnimalBidWithdrawn(uint256,uint256,address)": EventFragment;
    "AnimalBought(uint256,uint256,address,address)": EventFragment;
    "AnimalNoLongerForSale(uint256)": EventFragment;
    "AnimalOffered(uint256,uint256,address)": EventFragment;
    "AnimalTransfer(address,address,uint256)": EventFragment;
    "Assign(address,uint256)": EventFragment;
    "EggBought(uint256,uint256,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnimalBidEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalBidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalNoLongerForSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnimalTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Assign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EggBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class CryptoZooMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: CryptoZooMarketInterface;

  functions: {
    acceptBidForAnimal(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBidForAnimal(uint256,uint256)"(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allAnimalsAssigned(overrides?: CallOverrides): Promise<[boolean]>;

    "allAnimalsAssigned()"(overrides?: CallOverrides): Promise<[boolean]>;

    allInitialOwnersAssigned(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allInitialOwnersAssigned()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    animalBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        animalIndex: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    "animalBids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        animalIndex: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    animalIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "animalIndexToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    animalNoLongerForSale(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "animalNoLongerForSale(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    animalsOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        animalIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    "animalsOfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        animalIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    animalsRemainingToAssign(overrides?: CallOverrides): Promise<[BigNumber]>;

    "animalsRemainingToAssign()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    buyEgg(overrides?: Overrides): Promise<ContractTransaction>;

    "buyEgg()"(overrides?: Overrides): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    enterBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "enterBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nextAnimalIndexToAssign(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextAnimalIndexToAssign()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerAnimalForSale(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerAnimalForSale(uint256,uint256)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerAnimalForSaleToAddress(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerAnimalForSaleToAddress(uint256,uint256,address)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setInitialOwner(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInitialOwner(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialOwners(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInitialOwners(address[],uint256[])"(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZooToken(
      _zooToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZooToken(address)"(
      _zooToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    standard(overrides?: CallOverrides): Promise<[string]>;

    "standard()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAnimal(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAnimal(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptBidForAnimal(
    animalIndex: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBidForAnimal(uint256,uint256)"(
    animalIndex: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allAnimalsAssigned(overrides?: CallOverrides): Promise<boolean>;

  "allAnimalsAssigned()"(overrides?: CallOverrides): Promise<boolean>;

  allInitialOwnersAssigned(overrides?: Overrides): Promise<ContractTransaction>;

  "allInitialOwnersAssigned()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  animalBids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber] & {
      hasBid: boolean;
      animalIndex: BigNumber;
      bidder: string;
      value: BigNumber;
    }
  >;

  "animalBids(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber] & {
      hasBid: boolean;
      animalIndex: BigNumber;
      bidder: string;
      value: BigNumber;
    }
  >;

  animalIndexToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "animalIndexToAddress(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  animalNoLongerForSale(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "animalNoLongerForSale(uint256)"(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  animalsOfferedForSale(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isForSale: boolean;
      animalIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
    }
  >;

  "animalsOfferedForSale(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isForSale: boolean;
      animalIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
    }
  >;

  animalsRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>;

  "animalsRemainingToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyAnimal(
    animalIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyAnimal(uint256)"(
    animalIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  buyEgg(overrides?: Overrides): Promise<ContractTransaction>;

  "buyEgg()"(overrides?: Overrides): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  enterBidForAnimal(
    animalIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "enterBidForAnimal(uint256)"(
    animalIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getAnimal(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAnimal(uint256)"(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextAnimalIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>;

  "nextAnimalIndexToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

  offerAnimalForSale(
    animalIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerAnimalForSale(uint256,uint256)"(
    animalIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerAnimalForSaleToAddress(
    animalIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerAnimalForSaleToAddress(uint256,uint256,address)"(
    animalIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingWithdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingWithdrawals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setInitialOwner(
    to: string,
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInitialOwner(address,uint256)"(
    to: string,
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialOwners(
    addresses: string[],
    indices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInitialOwners(address[],uint256[])"(
    addresses: string[],
    indices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZooToken(
    _zooToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZooToken(address)"(
    _zooToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  standard(overrides?: CallOverrides): Promise<string>;

  "standard()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferAnimal(
    to: string,
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAnimal(address,uint256)"(
    to: string,
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawBidForAnimal(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawBidForAnimal(uint256)"(
    animalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBidForAnimal(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBidForAnimal(uint256,uint256)"(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allAnimalsAssigned(overrides?: CallOverrides): Promise<boolean>;

    "allAnimalsAssigned()"(overrides?: CallOverrides): Promise<boolean>;

    allInitialOwnersAssigned(overrides?: CallOverrides): Promise<void>;

    "allInitialOwnersAssigned()"(overrides?: CallOverrides): Promise<void>;

    animalBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        animalIndex: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    "animalBids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        animalIndex: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    animalIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "animalIndexToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    animalNoLongerForSale(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "animalNoLongerForSale(uint256)"(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    animalsOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        animalIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    "animalsOfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        animalIndex: BigNumber;
        seller: string;
        minValue: BigNumber;
        onlySellTo: string;
      }
    >;

    animalsRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>;

    "animalsRemainingToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAnimal(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyEgg(overrides?: CallOverrides): Promise<void>;

    "buyEgg()"(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    enterBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enterBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnimal(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextAnimalIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAnimalIndexToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

    offerAnimalForSale(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerAnimalForSale(uint256,uint256)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerAnimalForSaleToAddress(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerAnimalForSaleToAddress(uint256,uint256,address)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInitialOwner(
      to: string,
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInitialOwner(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialOwners(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setInitialOwners(address[],uint256[])"(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setZooToken(_zooToken: string, overrides?: CallOverrides): Promise<void>;

    "setZooToken(address)"(
      _zooToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    standard(overrides?: CallOverrides): Promise<string>;

    "standard()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnimal(
      to: string,
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAnimal(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnimalBidEntered(
      animalIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { animalIndex: BigNumber; value: BigNumber; fromAddress: string }
    >;

    AnimalBidWithdrawn(
      animalIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { animalIndex: BigNumber; value: BigNumber; fromAddress: string }
    >;

    AnimalBought(
      animalIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null,
      toAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        animalIndex: BigNumber;
        value: BigNumber;
        fromAddress: string;
        toAddress: string;
      }
    >;

    AnimalNoLongerForSale(
      animalIndex: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { animalIndex: BigNumber }>;

    AnimalOffered(
      animalIndex: BigNumberish | null,
      minValue: null,
      toAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { animalIndex: BigNumber; minValue: BigNumber; toAddress: string }
    >;

    AnimalTransfer(
      from: string | null,
      to: string | null,
      animalIndex: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; animalIndex: BigNumber }
    >;

    Assign(
      to: string | null,
      animalIndex: null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; animalIndex: BigNumber }
    >;

    EggBought(
      animalIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null,
      toAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        animalIndex: BigNumber;
        value: BigNumber;
        fromAddress: string;
        toAddress: string;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    acceptBidForAnimal(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBidForAnimal(uint256,uint256)"(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allAnimalsAssigned(overrides?: CallOverrides): Promise<BigNumber>;

    "allAnimalsAssigned()"(overrides?: CallOverrides): Promise<BigNumber>;

    allInitialOwnersAssigned(overrides?: Overrides): Promise<BigNumber>;

    "allInitialOwnersAssigned()"(overrides?: Overrides): Promise<BigNumber>;

    animalBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "animalBids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    animalIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "animalIndexToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    animalNoLongerForSale(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "animalNoLongerForSale(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    animalsOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "animalsOfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    animalsRemainingToAssign(overrides?: CallOverrides): Promise<BigNumber>;

    "animalsRemainingToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    buyEgg(overrides?: Overrides): Promise<BigNumber>;

    "buyEgg()"(overrides?: Overrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    enterBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "enterBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAnimalIndexToAssign(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAnimalIndexToAssign()"(overrides?: CallOverrides): Promise<BigNumber>;

    offerAnimalForSale(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerAnimalForSale(uint256,uint256)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerAnimalForSaleToAddress(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerAnimalForSaleToAddress(uint256,uint256,address)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInitialOwner(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInitialOwner(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialOwners(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInitialOwners(address[],uint256[])"(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZooToken(_zooToken: string, overrides?: Overrides): Promise<BigNumber>;

    "setZooToken(address)"(
      _zooToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    standard(overrides?: CallOverrides): Promise<BigNumber>;

    "standard()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnimal(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAnimal(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBidForAnimal(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBidForAnimal(uint256,uint256)"(
      animalIndex: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allAnimalsAssigned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allAnimalsAssigned()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allInitialOwnersAssigned(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allInitialOwnersAssigned()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    animalBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "animalBids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    animalIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "animalIndexToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    animalNoLongerForSale(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "animalNoLongerForSale(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    animalsOfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "animalsOfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    animalsRemainingToAssign(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "animalsRemainingToAssign()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    buyEgg(overrides?: Overrides): Promise<PopulatedTransaction>;

    "buyEgg()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "enterBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAnimalIndexToAssign(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextAnimalIndexToAssign()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerAnimalForSale(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerAnimalForSale(uint256,uint256)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerAnimalForSaleToAddress(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerAnimalForSaleToAddress(uint256,uint256,address)"(
      animalIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInitialOwner(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInitialOwner(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialOwners(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInitialOwners(address[],uint256[])"(
      addresses: string[],
      indices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZooToken(
      _zooToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZooToken(address)"(
      _zooToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    standard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "standard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAnimal(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAnimal(address,uint256)"(
      to: string,
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawBidForAnimal(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawBidForAnimal(uint256)"(
      animalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
