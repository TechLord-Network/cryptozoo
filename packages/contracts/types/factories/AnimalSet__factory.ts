/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AnimalSet } from "../AnimalSet";

export class AnimalSet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _description: string,
    _data: {
      assetURI: string;
      assetGatewayURL: string;
      metadataURI: string;
      metadataGatewayURL: string;
    },
    _yield: BigNumberish,
    _boost: BigNumberish,
    _probability: BigNumberish,
    overrides?: Overrides
  ): Promise<AnimalSet> {
    return super.deploy(
      _name,
      _description,
      _data,
      _yield,
      _boost,
      _probability,
      overrides || {}
    ) as Promise<AnimalSet>;
  }
  getDeployTransaction(
    _name: string,
    _description: string,
    _data: {
      assetURI: string;
      assetGatewayURL: string;
      metadataURI: string;
      metadataGatewayURL: string;
    },
    _yield: BigNumberish,
    _boost: BigNumberish,
    _probability: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _description,
      _data,
      _yield,
      _boost,
      _probability,
      overrides || {}
    );
  }
  attach(address: string): AnimalSet {
    return super.attach(address) as AnimalSet;
  }
  connect(signer: Signer): AnimalSet__factory {
    return super.connect(signer) as AnimalSet__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnimalSet {
    return new Contract(address, _abi, signerOrProvider) as AnimalSet;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "assetURI",
            type: "string",
          },
          {
            internalType: "string",
            name: "assetGatewayURL",
            type: "string",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "string",
            name: "metadataGatewayURL",
            type: "string",
          },
        ],
        internalType: "struct Data",
        name: "_data",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_yield",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_boost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_probability",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106ad3803806106ad83398101604081905261002f91610253565b610038336100e3565b855161004b906007906020890190610133565b50845161005f906008906020880190610133565b5083518051859160029161007a918391602090910190610133565b5060208281015180516100939260018501920190610133565b50604082015180516100af916002840191602090910190610133565b50606082015180516100cb916003840191602090910190610133565b505050600992909255600a55600b5550610432915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461013f906103e1565b90600052602060002090601f01602090048101928261016157600085556101a7565b82601f1061017a57805160ff19168380011785556101a7565b828001600101855582156101a7579182015b828111156101a757825182559160200191906001019061018c565b506101b39291506101b7565b5090565b5b808211156101b357600081556001016101b8565b600082601f8301126101dc578081fd5b81516001600160401b038111156101f5576101f561041c565b6020610209601f8301601f191682016103b1565b828152858284870101111561021c578384fd5b835b8381101561023957858101830151828201840152820161021e565b8381111561024957848385840101525b5095945050505050565b60008060008060008060c0878903121561026b578182fd5b86516001600160401b0380821115610281578384fd5b61028d8a838b016101cc565b975060208901519150808211156102a2578384fd5b6102ae8a838b016101cc565b965060408901519150808211156102c3578384fd5b908801906080828b0312156102d6578384fd5b6102de610389565b8251828111156102ec578586fd5b6102f88c8286016101cc565b82525060208301518281111561030c578586fd5b6103188c8286016101cc565b60208301525060408301518281111561032f578586fd5b61033b8c8286016101cc565b604083015250606083015182811115610352578586fd5b61035e8c8286016101cc565b606083015250809650505050606087015192506080870151915060a087015190509295509295509295565b604051608081016001600160401b03811182821017156103ab576103ab61041c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156103d9576103d961041c565b604052919050565b600181811c908216806103f557607f821691505b6020821081141561041657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61026c806104416000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610208565b6100ed565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6100eb60006101b8565b565b6000546001600160a01b031633146101475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b6001600160a01b0381166101ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b6101b5816101b8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610219578081fd5b81356001600160a01b038116811461022f578182fd5b939250505056fea26469706673582212207c21d3f9226e023106ce40b969f5bed493b2c73e9979f01fae97dbf576cb708264736f6c63430008040033";
